@charset "UTF-8";
/* http://meyerweb.com/eric/tools/css/reset/ 
   v2.0 | 20110126
   License: none (public domain)
*/
html, body, div, span, applet, object, iframe,
h1, h2, h3, h4, h5, h6, p, blockquote, pre,
a, abbr, acronym, address, big, cite, code,
del, dfn, em, img, ins, kbd, q, s, samp,
small, strike, strong, sub, sup, tt, var,
b, u, i, center,
dl, dt, dd, ol, ul, li,
fieldset, form, label, legend,
table, caption, tbody, tfoot, thead, tr, th, td,
article, aside, canvas, details, embed,
figure, figcaption, footer, header, hgroup,
menu, nav, output, ruby, section, summary,
time, mark, audio, video {
  margin: 0;
  padding: 0;
  border: 0;
  font-size: 100%;
  font: inherit;
  vertical-align: baseline; }

/* HTML5 display-role reset for older browsers */
article, aside, details, figcaption, figure,
footer, header, hgroup, menu, nav, section {
  display: block; }

body {
  line-height: 1; }

ol, ul {
  list-style: none; }

blockquote, q {
  quotes: none; }

blockquote:before, blockquote:after,
q:before, q:after {
  content: '';
  content: none; }

table {
  border-collapse: collapse;
  border-spacing: 0; }

/**
 * A thin layer on top of normalize.css that provides a starting point more
 * suitable for web applications.
 */
/**
 * Prevent margin and border from affecting element width.
 * https://goo.gl/pYtbK7
 *
 */
html {
  box-sizing: border-box; }

*,
*::before,
*::after {
  box-sizing: inherit; }

/**
 * Removes the default spacing and border for appropriate elements.
 */
blockquote,
dl,
dd,
h1,
h2,
h3,
h4,
h5,
h6,
figure,
p,
pre {
  margin: 0; }

button {
  background: transparent;
  border: 0;
  padding: 0; }

/**
 * Work around a Firefox/IE bug where the transparent `button` background
 * results in a loss of the default `button` focus styles.
 */
button:focus {
  outline: 1px dotted;
  outline: 5px auto -webkit-focus-ring-color; }

fieldset {
  border: 0;
  margin: 0;
  padding: 0; }

iframe {
  border: 0; }

ol,
ul {
  list-style: none;
  margin: 0;
  padding: 0; }

/**
 * Suppress the focus outline on elements that cannot be accessed via keyboard.
 * This prevents an unwanted focus outline from appearing around elements that
 * might still respond to pointer events.
 */
[tabindex="-1"]:focus {
  outline: none !important; }

html,
.root {
  font-size: 24px;
  line-height: 24px; }
  @media (min-width: 720px) {
    html,
    .root {
      font-size: 27px;
      line-height: 27px; } }

body {
  font-family: Sintony, serif;
  font-size: 16px;
  line-height: 1rem;
  max-width: 50rem;
  padding-left: 1rem;
  padding-right: 1rem;
  margin: auto; }
  @media (min-width: 720px) {
    body {
      font-size: 18px;
      line-height: 1rem;
      padding-left: 2rem;
      padding-right: 2rem; } }

h1,
.h1 {
  font-size: 40px;
  line-height: 2rem;
  margin-top: 1rem;
  margin-bottom: 2rem;
  font-family: Rufina, sans-serif; }
  @media (min-width: 720px) {
    h1,
    .h1 {
      font-size: 63px;
      line-height: 3rem; } }

h2,
.h2 {
  font-size: 30px;
  line-height: 2rem;
  margin-top: 1rem;
  margin-bottom: 1rem; }
  @media (min-width: 720px) {
    h2,
    .h2 {
      font-size: 42px; } }

h3,
.h3 {
  font-size: 22px;
  line-height: 1rem;
  margin-top: 1rem;
  margin-bottom: 0; }
  @media (min-width: 720px) {
    h3,
    .h3 {
      font-size: 1rem; } }

h4,
.h4 {
  font-size: 16px;
  line-height: 1rem;
  margin-top: 1rem;
  margin-bottom: 0; }
  @media (min-width: 720px) {
    h4,
    .h4 {
      font-size: 18px; } }

h5,
.h5 {
  font-size: 16px;
  line-height: 1rem;
  margin-top: 1rem;
  margin-bottom: 0; }
  @media (min-width: 720px) {
    h5,
    .h5 {
      font-size: 18px; } }

p, ul, ol, pre, table, blockquote {
  margin-top: 0;
  margin-bottom: 1rem; }

ul ul, ol ol, ul ol, ol ul {
  margin-top: 0;
  margin-bottom: 0; }

/* Let's make sure all's aligned */
hr,
.hr {
  opacity: .2;
  border: 0;
  margin: 0;
  height: 1px; }

sub, sup {
  line-height: 0;
  position: relative;
  vertical-align: baseline; }

sup {
  top: -0.5em; }

sub {
  bottom: -0.25em; }

a {
  color: inherit;
  text-decoration: none; }

strong {
  font-weight: 900; }

/**
 * @define utilities
 * Vertical alignment utilities
 * Depends on an appropriate `display` value.
 */
.u-alignBaseline {
  vertical-align: baseline !important; }

.u-alignBottom {
  vertical-align: bottom !important; }

.u-alignMiddle {
  vertical-align: middle !important; }

.u-alignTop {
  vertical-align: top !important; }

/**
 * @define utilities
 * Display-type utilities
 */
.u-block {
  display: block !important; }

.u-hidden {
  display: none !important; }

/**
 * Completely remove from the flow but leave available to screen readers.
 */
.u-hiddenVisually {
  border: 0 !important;
  clip: rect(1px, 1px, 1px, 1px) !important;
  height: 1px !important;
  overflow: hidden !important;
  padding: 0 !important;
  position: absolute !important;
  width: 1px !important; }

.u-inline {
  display: inline !important; }

/**
 * 1. Fix for Firefox bug: an image styled `max-width:100%` within an
 * inline-block will display at its default size, and not limit its width to
 * 100% of an ancestral container.
 */
.u-inlineBlock {
  display: inline-block !important;
  max-width: 100%;
  /* 1 */ }

.u-table {
  display: table !important; }

.u-tableCell {
  display: table-cell !important; }

.u-tableRow {
  display: table-row !important; }

/**
 * @define utilities
 * Contain floats
 *
 * Make an element expand to contain floated children.
 * Uses pseudo-elements (micro clearfix).
 *
 * 1. The space content is one way to avoid an Opera bug when the
 *    `contenteditable` attribute is included anywhere else in the document.
 *    Otherwise it causes space to appear at the top and bottom of the
 *    element.
 * 2. The use of `table` rather than `block` is only necessary if using
 *    `:before` to contain the top-margins of child elements.
 */
.u-cf::before,
.u-cf::after {
  content: " ";
  /* 1 */
  display: table;
  /* 2 */ }

.u-cf::after {
  clear: both; }

/**
 * New block formatting context
 *
 * This affords some useful properties to the element. It won't wrap under
 * floats. Will also contain any floated children.

 * N.B. This will clip overflow. Use the alternative method below if this is
 * problematic.
 */
.u-nbfc {
  overflow: hidden !important; }

/**
 * New block formatting context (alternative)
 *
 * Alternative method when overflow must not be clipped.
 *
 * 1. Create a new block formatting context (NBFC).
 * 2. Avoid shrink-wrap behaviour of table-cell.
 *
 * N.B. This breaks down in some browsers when elements within this element
 * exceed its width.
 */
.u-nbfcAlt {
  display: table-cell !important;
  /* 1 */
  width: 10000px !important;
  /* 2 */ }

/**
 * Floats
 */
.u-floatLeft {
  float: left !important; }

.u-floatRight {
  float: right !important; }

/**
 * @define utilities
 * Clean link
 *
 * A link without any text-decoration at all.
 */
.u-linkClean,
.u-linkClean:hover,
.u-linkClean:focus,
.u-linkClean:active {
  text-decoration: none !important; }

/**
 * Link complex
 *
 * A common pattern is to have a link with several pieces of text and/or an
 * icon, where only one piece of text should display the underline when the
 * link is the subject of user interaction.
 *
 * Example HTML:
 *
 * <a class="u-linkComplex" href="#">
 *   Link complex
 *   <span class="u-linkComplexTarget">target</span>
 * </a>
 */
.u-linkComplex,
.u-linkComplex:hover,
.u-linkComplex:focus,
.u-linkComplex:active {
  text-decoration: none !important; }

.u-linkComplex:hover .u-linkComplexTarget,
.u-linkComplex:focus .u-linkComplexTarget,
.u-linkComplex:active .u-linkComplexTarget {
  text-decoration: underline !important; }

/**
 * Block-level link
 *
 * Combination of traits commonly used in vertical navigation lists.
 */
.u-linkBlock,
.u-linkBlock:hover,
.u-linkBlock:focus,
.u-linkBlock:active {
  display: block !important;
  text-decoration: none !important; }

/**
 * @define utilities
 * Specify the proportional offset after an element.
 * Intentional redundancy build into each set of unit classes.
 * Supports: 2, 4, 5, 6, 8, 10, 12 section
 */
.u-after1of12 {
  margin-right: calc(100% * 1 / 12) !important; }

.u-after1of10 {
  margin-right: 10% !important; }

.u-after1of8 {
  margin-right: 12.5% !important; }

.u-after1of6,
.u-after2of12 {
  margin-right: calc(100% * 1 / 6) !important; }

.u-after1of5,
.u-after2of10 {
  margin-right: 20% !important; }

.u-after1of4,
.u-after2of8,
.u-after3of12 {
  margin-right: 25% !important; }

.u-after3of10 {
  margin-right: 30% !important; }

.u-after1of3,
.u-after2of6,
.u-after4of12 {
  margin-right: calc(100% * 1 / 3) !important; }

.u-after3of8 {
  margin-right: 37.5% !important; }

.u-after2of5,
.u-after4of10 {
  margin-right: 40% !important; }

.u-after5of12 {
  margin-right: calc(100% * 5 / 12) !important; }

.u-after1of2,
.u-after2of4,
.u-after3of6,
.u-after4of8,
.u-after5of10,
.u-after6of12 {
  margin-right: 50% !important; }

.u-after7of12 {
  margin-right: calc(100% * 7 / 12) !important; }

.u-after3of5,
.u-after6of10 {
  margin-right: 60% !important; }

.u-after5of8 {
  margin-right: 62.5% !important; }

.u-after2of3,
.u-after4of6,
.u-after8of12 {
  margin-right: calc(100% * 2 / 3) !important; }

.u-after7of10 {
  margin-right: 70% !important; }

.u-after3of4,
.u-after6of8,
.u-after9of12 {
  margin-right: 75% !important; }

.u-after4of5,
.u-after8of10 {
  margin-right: 80% !important; }

.u-after5of6,
.u-after10of12 {
  margin-right: calc(100% * 5 / 6) !important; }

.u-after7of8 {
  margin-right: 87.5% !important; }

.u-after9of10 {
  margin-right: 90% !important; }

.u-after11of12 {
  margin-right: calc(100% * 11 / 12) !important; }

/**
 * @define utilities
 * Offset: breakpoint 1 (small)
 *
 * Specify the proportional offset after an element.
 * Intentional redundancy build into each set of unit classes.
 * Supports: 2, 4, 5, 6, 8, 10, 12 section
 */
@media (min-width: 480px) {
  .u-sm-afterNone {
    margin-right: 0 !important; }

  .u-sm-after1of12 {
    margin-right: calc(100% * 1 / 12) !important; }

  .u-sm-after1of10 {
    margin-right: 10% !important; }

  .u-sm-after1of8 {
    margin-right: 12.5% !important; }

  .u-sm-after1of6,
  .u-sm-after2of12 {
    margin-right: calc(100% * 1 / 6) !important; }

  .u-sm-after1of5,
  .u-sm-after2of10 {
    margin-right: 20% !important; }

  .u-sm-after1of4,
  .u-sm-after2of8,
  .u-sm-after3of12 {
    margin-right: 25% !important; }

  .u-sm-after3of10 {
    margin-right: 30% !important; }

  .u-sm-after1of3,
  .u-sm-after2of6,
  .u-sm-after4of12 {
    margin-right: calc(100% * 1 / 3) !important; }

  .u-sm-after3of8 {
    margin-right: 37.5% !important; }

  .u-sm-after2of5,
  .u-sm-after4of10 {
    margin-right: 40% !important; }

  .u-sm-after5of12 {
    margin-right: calc(100% * 5 / 12) !important; }

  .u-sm-after1of2,
  .u-sm-after2of4,
  .u-sm-after3of6,
  .u-sm-after4of8,
  .u-sm-after5of10,
  .u-sm-after6of12 {
    margin-right: 50% !important; }

  .u-sm-after7of12 {
    margin-right: calc(100% * 7 / 12) !important; }

  .u-sm-after3of5,
  .u-sm-after6of10 {
    margin-right: 60% !important; }

  .u-sm-after5of8 {
    margin-right: 62.5% !important; }

  .u-sm-after2of3,
  .u-sm-after4of6,
  .u-sm-after8of12 {
    margin-right: calc(100% * 2 / 3) !important; }

  .u-sm-after7of10 {
    margin-right: 70% !important; }

  .u-sm-after3of4,
  .u-sm-after6of8,
  .u-sm-after9of12 {
    margin-right: 75% !important; }

  .u-sm-after4of5,
  .u-sm-after8of10 {
    margin-right: 80% !important; }

  .u-sm-after5of6,
  .u-sm-after10of12 {
    margin-right: calc(100% * 5 / 6) !important; }

  .u-sm-after7of8 {
    margin-right: 87.5% !important; }

  .u-sm-after9of10 {
    margin-right: 90% !important; }

  .u-sm-after11of12 {
    margin-right: calc(100% * 11 / 12) !important; } }
@media (min-width: 720px) {
  .u-md-afterNone {
    margin-right: 0 !important; }

  .u-md-after1of12 {
    margin-right: calc(100% * 1 / 12) !important; }

  .u-md-after1of10 {
    margin-right: 10% !important; }

  .u-md-after1of8 {
    margin-right: 12.5% !important; }

  .u-md-after1of6,
  .u-md-after2of12 {
    margin-right: calc(100% * 1 / 6) !important; }

  .u-md-after1of5,
  .u-md-after2of10 {
    margin-right: 20% !important; }

  .u-md-after1of4,
  .u-md-after2of8,
  .u-md-after3of12 {
    margin-right: 25% !important; }

  .u-md-after3of10 {
    margin-right: 30% !important; }

  .u-md-after1of3,
  .u-md-after2of6,
  .u-md-after4of12 {
    margin-right: calc(100% * 1 / 3) !important; }

  .u-md-after3of8 {
    margin-right: 37.5% !important; }

  .u-md-after2of5,
  .u-md-after4of10 {
    margin-right: 40% !important; }

  .u-md-after5of12 {
    margin-right: calc(100% * 5 / 12) !important; }

  .u-md-after1of2,
  .u-md-after2of4,
  .u-md-after3of6,
  .u-md-after4of8,
  .u-md-after5of10,
  .u-md-after6of12 {
    margin-right: 50% !important; }

  .u-md-after7of12 {
    margin-right: calc(100% * 7 / 12) !important; }

  .u-md-after3of5,
  .u-md-after6of10 {
    margin-right: 60% !important; }

  .u-md-after5of8 {
    margin-right: 62.5% !important; }

  .u-md-after2of3,
  .u-md-after4of6,
  .u-md-after8of12 {
    margin-right: calc(100% * 2 / 3) !important; }

  .u-md-after7of10 {
    margin-right: 70% !important; }

  .u-md-after3of4,
  .u-md-after6of8,
  .u-md-after9of12 {
    margin-right: 75% !important; }

  .u-md-after4of5,
  .u-md-after8of10 {
    margin-right: 80% !important; }

  .u-md-after5of6,
  .u-md-after10of12 {
    margin-right: calc(100% * 5 / 6) !important; }

  .u-md-after7of8 {
    margin-right: 87.5% !important; }

  .u-md-after9of10 {
    margin-right: 90% !important; }

  .u-md-after11of12 {
    margin-right: calc(100% * 11 / 12) !important; } }
/**
 * @define utilities
 * Offset: breakpoint 3 (large)
 *
 * Specify the proportional offset after an element.
 * Intentional redundancy build into each set of unit classes.
 * Supports: 2, 4, 5, 6, 8, 10, 12 section
 */
@media (min-width: 1200px) {
  .u-lg-afterNone {
    margin-right: 0 !important; }

  .u-lg-after1of12 {
    margin-right: calc(100% * 1 / 12) !important; }

  .u-lg-after1of10 {
    margin-right: 10% !important; }

  .u-lg-after1of8 {
    margin-right: 12.5% !important; }

  .u-lg-after1of6,
  .u-lg-after2of12 {
    margin-right: calc(100% * 1 / 6) !important; }

  .u-lg-after1of5,
  .u-lg-after2of10 {
    margin-right: 20% !important; }

  .u-lg-after1of4,
  .u-lg-after2of8,
  .u-lg-after3of12 {
    margin-right: 25% !important; }

  .u-lg-after3of10 {
    margin-right: 30% !important; }

  .u-lg-after1of3,
  .u-lg-after2of6,
  .u-lg-after4of12 {
    margin-right: calc(100% * 1 / 3) !important; }

  .u-lg-after3of8 {
    margin-right: 37.5% !important; }

  .u-lg-after2of5,
  .u-lg-after4of10 {
    margin-right: 40% !important; }

  .u-lg-after5of12 {
    margin-right: calc(100% * 5 / 12) !important; }

  .u-lg-after1of2,
  .u-lg-after2of4,
  .u-lg-after3of6,
  .u-lg-after4of8,
  .u-lg-after5of10,
  .u-lg-after6of12 {
    margin-right: 50% !important; }

  .u-lg-after7of12 {
    margin-right: calc(100% * 7 / 12) !important; }

  .u-lg-after3of5,
  .u-lg-after6of10 {
    margin-right: 60% !important; }

  .u-lg-after5of8 {
    margin-right: 62.5% !important; }

  .u-lg-after2of3,
  .u-lg-after4of6,
  .u-lg-after8of12 {
    margin-right: calc(100% * 2 / 3) !important; }

  .u-lg-after7of10 {
    margin-right: 70% !important; }

  .u-lg-after3of4,
  .u-lg-after6of8,
  .u-lg-after9of12 {
    margin-right: 75% !important; }

  .u-lg-after4of5,
  .u-lg-after8of10 {
    margin-right: 80% !important; }

  .u-lg-after5of6,
  .u-lg-after10of12 {
    margin-right: calc(100% * 5 / 6) !important; }

  .u-lg-after7of8 {
    margin-right: 87.5% !important; }

  .u-lg-after9of10 {
    margin-right: 90% !important; }

  .u-lg-after11of12 {
    margin-right: calc(100% * 11 / 12) !important; } }
/**
 * @define utilities
 * Specify the proportional offset before an object.
 * Intentional redundancy build into each set of unit classes.
 * Supports: 2, 3, 4, 5, 6, 8, 10, 12 section
 */
.u-before1of12 {
  margin-left: calc(100% * 1 / 12) !important; }

.u-before1of10 {
  margin-left: 10% !important; }

.u-before1of8 {
  margin-left: 12.5% !important; }

.u-before1of6,
.u-before2of12 {
  margin-left: calc(100% * 1 / 6) !important; }

.u-before1of5,
.u-before2of10 {
  margin-left: 20% !important; }

.u-before1of4,
.u-before2of8,
.u-before3of12 {
  margin-left: 25% !important; }

.u-before3of10 {
  margin-left: 30% !important; }

.u-before1of3,
.u-before2of6,
.u-before4of12 {
  margin-left: calc(100% * 1 / 3) !important; }

.u-before3of8 {
  margin-left: 37.5% !important; }

.u-before2of5,
.u-before4of10 {
  margin-left: 40% !important; }

.u-before5of12 {
  margin-left: calc(100% * 5 / 12) !important; }

.u-before1of2,
.u-before2of4,
.u-before3of6,
.u-before4of8,
.u-before5of10,
.u-before6of12 {
  margin-left: 50% !important; }

.u-before7of12 {
  margin-left: calc(100% * 7 / 12) !important; }

.u-before3of5,
.u-before6of10 {
  margin-left: 60% !important; }

.u-before5of8 {
  margin-left: 62.5% !important; }

.u-before2of3,
.u-before4of6,
.u-before8of12 {
  margin-left: calc(100% * 2 / 3) !important; }

.u-before7of10 {
  margin-left: 70% !important; }

.u-before3of4,
.u-before6of8,
.u-before9of12 {
  margin-left: 75% !important; }

.u-before4of5,
.u-before8of10 {
  margin-left: 80% !important; }

.u-before5of6,
.u-before10of12 {
  margin-left: calc(100% * 5 / 6) !important; }

.u-before7of8 {
  margin-left: 87.5% !important; }

.u-before9of10 {
  margin-left: 90% !important; }

.u-before11of12 {
  margin-left: calc(100% * 11 / 12) !important; }

/**
 * @define utilities
 * Offset: breakpoint 1 (small)
 *
 * Specify the proportional offset before an element.
 * Intentional redundancy build into each set of unit classes.
 * Supports: 2, 3, 4, 5, 6, 8, 10, 12 section
 */
@media (min-width: 480px) {
  .u-sm-beforeNone {
    margin-left: 0 !important; }

  .u-sm-before1of12 {
    margin-left: calc(100% * 1 / 12) !important; }

  .u-sm-before1of10 {
    margin-left: 10% !important; }

  .u-sm-before1of8 {
    margin-left: 12.5% !important; }

  .u-sm-before1of6,
  .u-sm-before2of12 {
    margin-left: calc(100% * 1 / 6) !important; }

  .u-sm-before1of5,
  .u-sm-before2of10 {
    margin-left: 20% !important; }

  .u-sm-before1of4,
  .u-sm-before2of8,
  .u-sm-before3of12 {
    margin-left: 25% !important; }

  .u-sm-before3of10 {
    margin-left: 30% !important; }

  .u-sm-before1of3,
  .u-sm-before2of6,
  .u-sm-before4of12 {
    margin-left: calc(100% * 1 / 3) !important; }

  .u-sm-before3of8 {
    margin-left: 37.5% !important; }

  .u-sm-before2of5,
  .u-sm-before4of10 {
    margin-left: 40% !important; }

  .u-sm-before5of12 {
    margin-left: calc(100% * 5 / 12) !important; }

  .u-sm-before1of2,
  .u-sm-before2of4,
  .u-sm-before3of6,
  .u-sm-before4of8,
  .u-sm-before5of10,
  .u-sm-before6of12 {
    margin-left: 50% !important; }

  .u-sm-before7of12 {
    margin-left: calc(100% * 7 / 12) !important; }

  .u-sm-before3of5,
  .u-sm-before6of10 {
    margin-left: 60% !important; }

  .u-sm-before5of8 {
    margin-left: 62.5% !important; }

  .u-sm-before2of3,
  .u-sm-before4of6,
  .u-sm-before8of12 {
    margin-left: calc(100% * 2 / 3) !important; }

  .u-sm-before7of10 {
    margin-left: 70% !important; }

  .u-sm-before3of4,
  .u-sm-before6of8,
  .u-sm-before9of12 {
    margin-left: 75% !important; }

  .u-sm-before4of5,
  .u-sm-before8of10 {
    margin-left: 80% !important; }

  .u-sm-before5of6,
  .u-sm-before10of12 {
    margin-left: calc(100% * 5 / 6) !important; }

  .u-sm-before7of8 {
    margin-left: 87.5% !important; }

  .u-sm-before9of10 {
    margin-left: 90% !important; }

  .u-sm-before11of12 {
    margin-left: calc(100% * 11 / 12) !important; } }
/**
 * @define utilities
 * Offset: breakpoint 2 (medium)
 *
 * Specify the proportional offset before an element.
 * Intentional redundancy build into each set of unit classes.
 * Supports: 2, 3, 4, 5, 6, 8, 10, 12 section
 */
@media (min-width: 720px) {
  .u-md-beforeNone {
    margin-left: 0 !important; }

  .u-md-before1of12 {
    margin-left: calc(100% * 1 / 12) !important; }

  .u-md-before1of10 {
    margin-left: 10% !important; }

  .u-md-before1of8 {
    margin-left: 12.5% !important; }

  .u-md-before1of6,
  .u-md-before2of12 {
    margin-left: calc(100% * 1 / 6) !important; }

  .u-md-before1of5,
  .u-md-before2of10 {
    margin-left: 20% !important; }

  .u-md-before1of4,
  .u-md-before2of8,
  .u-md-before3of12 {
    margin-left: 25% !important; }

  .u-md-before3of10 {
    margin-left: 30% !important; }

  .u-md-before1of3,
  .u-md-before2of6,
  .u-md-before4of12 {
    margin-left: calc(100% * 1 / 3) !important; }

  .u-md-before3of8 {
    margin-left: 37.5% !important; }

  .u-md-before2of5,
  .u-md-before4of10 {
    margin-left: 40% !important; }

  .u-md-before5of12 {
    margin-left: calc(100% * 5 / 12) !important; }

  .u-md-before1of2,
  .u-md-before2of4,
  .u-md-before3of6,
  .u-md-before4of8,
  .u-md-before5of10,
  .u-md-before6of12 {
    margin-left: 50% !important; }

  .u-md-before7of12 {
    margin-left: calc(100% * 7 / 12) !important; }

  .u-md-before3of5,
  .u-md-before6of10 {
    margin-left: 60% !important; }

  .u-md-before5of8 {
    margin-left: 62.5% !important; }

  .u-md-before2of3,
  .u-md-before4of6,
  .u-md-before8of12 {
    margin-left: calc(100% * 2 / 3) !important; }

  .u-md-before7of10 {
    margin-left: 70% !important; }

  .u-md-before3of4,
  .u-md-before6of8,
  .u-md-before9of12 {
    margin-left: 75% !important; }

  .u-md-before4of5,
  .u-md-before8of10 {
    margin-left: 80% !important; }

  .u-md-before5of6,
  .u-md-before10of12 {
    margin-left: calc(100% * 5 / 6) !important; }

  .u-md-before7of8 {
    margin-left: 87.5% !important; }

  .u-md-before9of10 {
    margin-left: 90% !important; }

  .u-md-before11of12 {
    margin-left: calc(100% * 11 / 12) !important; } }
/**
 * @define utilities
 * Offset: breakpoint 3 (large)
 *
 * Specify the proportional offset before an element.
 * Intentional redundancy build into each set of unit classes.
 * Supports: 2, 3, 4, 5, 6, 8, 10, 12 section
 */
@media (min-width: 1200px) {
  .u-lg-beforeNone {
    margin-left: 0 !important; }

  .u-lg-before1of12 {
    margin-left: calc(100% * 1 / 12) !important; }

  .u-lg-before1of10 {
    margin-left: 10% !important; }

  .u-lg-before1of8 {
    margin-left: 12.5% !important; }

  .u-lg-before1of6,
  .u-lg-before2of12 {
    margin-left: calc(100% * 1 / 6) !important; }

  .u-lg-before1of5,
  .u-lg-before2of10 {
    margin-left: 20% !important; }

  .u-lg-before1of4,
  .u-lg-before2of8,
  .u-lg-before3of12 {
    margin-left: 25% !important; }

  .u-lg-before3of10 {
    margin-left: 30% !important; }

  .u-lg-before1of3,
  .u-lg-before2of6,
  .u-lg-before4of12 {
    margin-left: calc(100% * 1 / 3) !important; }

  .u-lg-before3of8 {
    margin-left: 37.5% !important; }

  .u-lg-before2of5,
  .u-lg-before4of10 {
    margin-left: 40% !important; }

  .u-lg-before5of12 {
    margin-left: calc(100% * 5 / 12) !important; }

  .u-lg-before1of2,
  .u-lg-before2of4,
  .u-lg-before3of6,
  .u-lg-before4of8,
  .u-lg-before5of10,
  .u-lg-before6of12 {
    margin-left: 50% !important; }

  .u-lg-before7of12 {
    margin-left: calc(100% * 7 / 12) !important; }

  .u-lg-before3of5,
  .u-lg-before6of10 {
    margin-left: 60% !important; }

  .u-lg-before5of8 {
    margin-left: 62.5% !important; }

  .u-lg-before2of3,
  .u-lg-before4of6,
  .u-lg-before8of12 {
    margin-left: calc(100% * 2 / 3) !important; }

  .u-lg-before7of10 {
    margin-left: 70% !important; }

  .u-lg-before3of4,
  .u-lg-before6of8,
  .u-lg-before9of12 {
    margin-left: 75% !important; }

  .u-lg-before4of5,
  .u-lg-before8of10 {
    margin-left: 80% !important; }

  .u-lg-before5of6,
  .u-lg-before10of12 {
    margin-left: calc(100% * 5 / 6) !important; }

  .u-lg-before7of8 {
    margin-left: 87.5% !important; }

  .u-lg-before9of10 {
    margin-left: 90% !important; }

  .u-lg-before11of12 {
    margin-left: calc(100% * 11 / 12) !important; } }
/** @define utilities */
.u-posFit,
.u-posAbsoluteCenter,
.u-posAbsolute {
  position: absolute !important; }

/**
 * Element will be centered to its nearest relatively-positioned
 * ancestor.
 */
.u-posFixedCenter,
.u-posAbsoluteCenter {
  left: 50% !important;
  top: 50% !important;
  transform: translate(-50%, -50%) !important; }

.u-posFit,
.u-posFullScreen {
  bottom: 0 !important;
  left: 0 !important;
  margin: auto !important;
  right: 0 !important;
  top: 0 !important; }

/**
 * 1. Make sure fixed elements are promoted into a new layer, for performance
 *    reasons.
 */
.u-posFullScreen,
.u-posFixedCenter,
.u-posFixed {
  backface-visibility: hidden;
  /* 1 */
  position: fixed !important; }

.u-posRelative {
  position: relative !important; }

.u-posStatic {
  position: static !important; }

/**
 * @define utilities
 * Sizing utilities
 */
/* Proportional widths
   ========================================================================== */
/**
 * Specify the proportional width of an object.
 * Intentional redundancy build into each set of unit classes.
 * Supports: 2, 3, 4, 5, 6, 8, 10, 12 part
 *
 * 1. Use `flex-basis: auto` with a width to avoid box-sizing bug in IE10/11
 *    http://git.io/vllMD
 */
.u-size1of12 {
  flex-basis: auto !important;
  width: calc(100% * 1 / 12) !important; }

.u-size1of10 {
  flex-basis: auto !important;
  width: 10% !important; }

.u-size1of8 {
  flex-basis: auto !important;
  width: 12.5% !important; }

.u-size1of6,
.u-size2of12 {
  flex-basis: auto !important;
  width: calc(100% * 1 / 6) !important; }

.u-size1of5,
.u-size2of10 {
  flex-basis: auto !important;
  width: 20% !important; }

.u-size1of4,
.u-size2of8,
.u-size3of12 {
  flex-basis: auto !important;
  width: 25% !important; }

.u-size3of10 {
  flex-basis: auto !important;
  width: 30% !important; }

.u-size1of3,
.u-size2of6,
.u-size4of12 {
  flex-basis: auto !important;
  width: calc(100% * 1 / 3) !important; }

.u-size3of8 {
  flex-basis: auto !important;
  width: 37.5% !important; }

.u-size2of5,
.u-size4of10 {
  flex-basis: auto !important;
  width: 40% !important; }

.u-size5of12 {
  flex-basis: auto !important;
  width: calc(100% * 5 / 12) !important; }

.u-size1of2,
.u-size2of4,
.u-size3of6,
.u-size4of8,
.u-size5of10,
.u-size6of12 {
  flex-basis: auto !important;
  width: 50% !important; }

.u-size7of12 {
  flex-basis: auto !important;
  width: calc(100% * 7 / 12) !important; }

.u-size3of5,
.u-size6of10 {
  flex-basis: auto !important;
  width: 60% !important; }

.u-size5of8 {
  flex-basis: auto !important;
  width: 62.5% !important; }

.u-size2of3,
.u-size4of6,
.u-size8of12 {
  flex-basis: auto !important;
  width: calc(100% * 2 / 3) !important; }

.u-size7of10 {
  flex-basis: auto !important;
  width: 70% !important; }

.u-size3of4,
.u-size6of8,
.u-size9of12 {
  flex-basis: auto !important;
  width: 75% !important; }

.u-size4of5,
.u-size8of10 {
  flex-basis: auto !important;
  width: 80% !important; }

.u-size5of6,
.u-size10of12 {
  flex-basis: auto !important;
  width: calc(100% * 5 / 6) !important; }

.u-size7of8 {
  flex-basis: auto !important;
  width: 87.5% !important; }

.u-size9of10 {
  flex-basis: auto !important;
  width: 90% !important; }

.u-size11of12 {
  flex-basis: auto !important;
  width: calc(100% * 11 / 12) !important; }

/* Intrinsic widths
   ========================================================================== */
/**
 * Make an element shrink wrap its content.
 */
.u-sizeFit {
  flex-basis: auto !important; }

/**
 * Make an element fill the remaining space.
 *
 * 1. Be explicit to work around IE10 bug with shorthand flex
 *    http://git.io/vllC7
 * 2. IE10 ignores previous `flex-basis` value. Setting again here fixes
 *    http://git.io/vllMt
 */
.u-sizeFill {
  flex: 1 1 0% !important;
  /* 1 */
  flex-basis: 0% !important;
  /* 2 */ }

/**
 * An alternative method to make an element fill the remaining space.
 * Distributes space based on the initial width and height of the element
 *
 * http://www.w3.org/TR/css-flexbox/images/rel-vs-abs-flex.svg
 */
.u-sizeFillAlt {
  flex: 1 1 auto !important;
  flex-basis: auto !important; }

/**
 * Make an element the width of its parent.
 */
.u-sizeFull {
  box-sizing: border-box !important;
  display: block !important;
  width: 100% !important; }

/**
 * @define utilities
 * Size: breakpoint 1 (small)
 */
@media (min-width: 480px) {
  /* Proportional widths: breakpoint 1 (small)
     ======================================================================== */
  /**
   * Specify the proportional width of an object.
   * Intentional redundancy build into each set of unit classes.
   * Supports: 2, 3, 4, 5, 6, 8, 10, 12 part
   *
   * 1. Use `flex-basis: auto` with a width to avoid box-sizing bug in IE10/11
   *    http://git.io/vllMD
   */
  .u-sm-size1of12 {
    flex-basis: auto !important;
    width: calc(100% * 1 / 12) !important; }

  .u-sm-size1of10 {
    flex-basis: auto !important;
    width: 10% !important; }

  .u-sm-size1of8 {
    flex-basis: auto !important;
    width: 12.5% !important; }

  .u-sm-size1of6,
  .u-sm-size2of12 {
    flex-basis: auto !important;
    width: calc(100% * 1 / 6) !important; }

  .u-sm-size1of5,
  .u-sm-size2of10 {
    flex-basis: auto !important;
    width: 20% !important; }

  .u-sm-size1of4,
  .u-sm-size2of8,
  .u-sm-size3of12 {
    flex-basis: auto !important;
    width: 25% !important; }

  .u-sm-size3of10 {
    flex-basis: auto !important;
    width: 30% !important; }

  .u-sm-size1of3,
  .u-sm-size2of6,
  .u-sm-size4of12 {
    flex-basis: auto !important;
    width: calc(100% * 1 / 3) !important; }

  .u-sm-size3of8 {
    flex-basis: auto !important;
    width: 37.5% !important; }

  .u-sm-size2of5,
  .u-sm-size4of10 {
    flex-basis: auto !important;
    width: 40% !important; }

  .u-sm-size5of12 {
    flex-basis: auto !important;
    width: calc(100% * 5 / 12) !important; }

  .u-sm-size1of2,
  .u-sm-size2of4,
  .u-sm-size3of6,
  .u-sm-size4of8,
  .u-sm-size5of10,
  .u-sm-size6of12 {
    flex-basis: auto !important;
    width: 50% !important; }

  .u-sm-size7of12 {
    flex-basis: auto !important;
    width: calc(100% * 7 / 12) !important; }

  .u-sm-size3of5,
  .u-sm-size6of10 {
    flex-basis: auto !important;
    width: 60% !important; }

  .u-sm-size5of8 {
    flex-basis: auto !important;
    width: 62.5% !important; }

  .u-sm-size2of3,
  .u-sm-size4of6,
  .u-sm-size8of12 {
    flex-basis: auto !important;
    width: calc(100% * 2 / 3) !important; }

  .u-sm-size7of10 {
    flex-basis: auto !important;
    width: 70% !important; }

  .u-sm-size3of4,
  .u-sm-size6of8,
  .u-sm-size9of12 {
    flex-basis: auto !important;
    width: 75% !important; }

  .u-sm-size4of5,
  .u-sm-size8of10 {
    flex-basis: auto !important;
    width: 80% !important; }

  .u-sm-size5of6,
  .u-sm-size10of12 {
    flex-basis: auto !important;
    width: calc(100% * 5 / 6) !important; }

  .u-sm-size7of8 {
    flex-basis: auto !important;
    width: 87.5% !important; }

  .u-sm-size9of10 {
    flex-basis: auto !important;
    width: 90% !important; }

  .u-sm-size11of12 {
    flex-basis: auto !important;
    width: calc(100% * 11 / 12) !important; }

  /* Intrinsic widths
     ======================================================================== */
  /**
   * Make an element shrink wrap its content.
   */
  .u-sm-sizeFit {
    flex-basis: auto !important; }

  /**
   * Make an element fill the remaining space.
   *
   * 1. Be explicit to work around IE10 bug with shorthand flex
   *    http://git.io/vllC7
   * 2. IE10 ignores previous `flex-basis` value. Setting again here fixes
   *    http://git.io/vllMt
   */
  .u-sm-sizeFill {
    flex: 1 1 0% !important;
    /* 1 */
    flex-basis: 0% !important;
    /* 2 */ }

  /**
   * An alternative method to make an element fill the remaining space.
   * Distributes space based on the initial width and height of the element
   *
   * http://www.w3.org/TR/css-flexbox/images/rel-vs-abs-flex.svg
   */
  .u-sm-sizeFillAlt {
    flex: 1 1 auto !important;
    flex-basis: auto !important; }

  /**
   * Make an element the width of its parent.
   */
  .u-sm-sizeFull {
    box-sizing: border-box !important;
    display: block !important;
    width: 100% !important; } }
/**
 * @define utilities
 * Size: breakpoint 2 (medium)
 */
@media (min-width: 720px) {
  /* Proportional widths: breakpoint 2 (medium)
     ======================================================================== */
  /**
   * Specify the proportional width of an object.
   * Intentional redundancy build into each set of unit classes.
   * Supports: 2, 3, 4, 5, 6, 8, 10, 12 part
   *
   * 1. Use `flex-basis: auto` with a width to avoid box-sizing bug in IE10/11
   *    http://git.io/vllMD
   */
  /* postcss-bem-linter: ignore */
  .u-md-size1of12 {
    flex-basis: auto !important;
    width: calc(100% * 1 / 12) !important; }

  .u-md-size1of10 {
    flex-basis: auto !important;
    width: 10% !important; }

  .u-md-size1of8 {
    flex-basis: auto !important;
    width: 12.5% !important; }

  .u-md-size1of6,
  .u-md-size2of12 {
    flex-basis: auto !important;
    width: calc(100% * 1 / 6) !important; }

  .u-md-size1of5,
  .u-md-size2of10 {
    flex-basis: auto !important;
    width: 20% !important; }

  .u-md-size1of4,
  .u-md-size2of8,
  .u-md-size3of12 {
    flex-basis: auto !important;
    width: 25% !important; }

  .u-md-size3of10 {
    flex-basis: auto !important;
    width: 30% !important; }

  .u-md-size1of3,
  .u-md-size2of6,
  .u-md-size4of12 {
    flex-basis: auto !important;
    width: calc(100% * 1 / 3) !important; }

  .u-md-size3of8 {
    flex-basis: auto !important;
    width: 37.5% !important; }

  .u-md-size2of5,
  .u-md-size4of10 {
    flex-basis: auto !important;
    width: 40% !important; }

  .u-md-size5of12 {
    flex-basis: auto !important;
    width: calc(100% * 5 / 12) !important; }

  .u-md-size1of2,
  .u-md-size2of4,
  .u-md-size3of6,
  .u-md-size4of8,
  .u-md-size5of10,
  .u-md-size6of12 {
    flex-basis: auto !important;
    width: 50% !important; }

  .u-md-size7of12 {
    flex-basis: auto !important;
    width: calc(100% * 7 / 12) !important; }

  .u-md-size3of5,
  .u-md-size6of10 {
    flex-basis: auto !important;
    width: 60% !important; }

  .u-md-size5of8 {
    flex-basis: auto !important;
    width: 62.5% !important; }

  .u-md-size2of3,
  .u-md-size4of6,
  .u-md-size8of12 {
    flex-basis: auto !important;
    width: calc(100% * 2 / 3) !important; }

  .u-md-size7of10 {
    flex-basis: auto !important;
    width: 70% !important; }

  .u-md-size3of4,
  .u-md-size6of8,
  .u-md-size9of12 {
    flex-basis: auto !important;
    width: 75% !important; }

  .u-md-size4of5,
  .u-md-size8of10 {
    flex-basis: auto !important;
    width: 80% !important; }

  .u-md-size5of6,
  .u-md-size10of12 {
    flex-basis: auto !important;
    width: calc(100% * 5 / 6) !important; }

  .u-md-size7of8 {
    flex-basis: auto !important;
    width: 87.5% !important; }

  .u-md-size9of10 {
    flex-basis: auto !important;
    width: 90% !important; }

  .u-md-size11of12 {
    flex-basis: auto !important;
    width: calc(100% * 11 / 12) !important; }

  /* Intrinsic widths
     ======================================================================== */
  /**
   * Make an element shrink wrap its content.
   */
  .u-md-sizeFit {
    flex-basis: auto !important; }

  /**
   * Make an element fill the remaining space.
   *
   * 1. Be explicit to work around IE10 bug with shorthand flex
   *    http://git.io/vllC7
   * 2. IE10 ignores previous `flex-basis` value. Setting again here fixes
   *    http://git.io/vllMt
   */
  .u-md-sizeFill {
    flex: 1 1 0% !important;
    /* 1 */
    flex-basis: 0% !important;
    /* 2 */ }

  /**
   * An alternative method to make an element fill the remaining space.
   * Distributes space based on the initial width and height of the element
   *
   * http://www.w3.org/TR/css-flexbox/images/rel-vs-abs-flex.svg
   */
  .u-md-sizeFillAlt {
    flex: 1 1 auto !important;
    flex-basis: auto !important; }

  /**
   * Make an element the width of its parent.
   */
  .u-md-sizeFull {
    box-sizing: border-box !important;
    display: block !important;
    width: 100% !important; } }
/**
 * @define utilities
 * Size: breakpoint 3 (large)
 */
@media (min-width: 1200px) {
  /* Proportional widths: breakpoint 3 (large)
     ======================================================================== */
  /**
   * Specify the proportional width of an object.
   * Intentional redundancy build into each set of unit classes.
   * Supports: 2, 3, 4, 5, 6, 8, 10, 12 part
   *
   * 1. Use `flex-basis: auto` with a width to avoid box-sizing bug in IE10/11
   *    http://git.io/vllMD
   */
  .u-lg-size1of12 {
    flex-basis: auto !important;
    width: calc(100% * 1 / 12) !important; }

  .u-lg-size1of10 {
    flex-basis: auto !important;
    width: 10% !important; }

  .u-lg-size1of8 {
    flex-basis: auto !important;
    width: 12.5% !important; }

  .u-lg-size1of6,
  .u-lg-size2of12 {
    flex-basis: auto !important;
    width: calc(100% * 1 / 6) !important; }

  .u-lg-size1of5,
  .u-lg-size2of10 {
    flex-basis: auto !important;
    width: 20% !important; }

  .u-lg-size1of4,
  .u-lg-size2of8,
  .u-lg-size3of12 {
    flex-basis: auto !important;
    width: 25% !important; }

  .u-lg-size3of10 {
    flex-basis: auto !important;
    width: 30% !important; }

  .u-lg-size1of3,
  .u-lg-size2of6,
  .u-lg-size4of12 {
    flex-basis: auto !important;
    width: calc(100% * 1 / 3) !important; }

  .u-lg-size3of8 {
    flex-basis: auto !important;
    width: 37.5% !important; }

  .u-lg-size2of5,
  .u-lg-size4of10 {
    flex-basis: auto !important;
    width: 40% !important; }

  .u-lg-size5of12 {
    flex-basis: auto !important;
    width: calc(100% * 5 / 12) !important; }

  .u-lg-size1of2,
  .u-lg-size2of4,
  .u-lg-size3of6,
  .u-lg-size4of8,
  .u-lg-size5of10,
  .u-lg-size6of12 {
    flex-basis: auto !important;
    width: 50% !important; }

  .u-lg-size7of12 {
    flex-basis: auto !important;
    width: calc(100% * 7 / 12) !important; }

  .u-lg-size3of5,
  .u-lg-size6of10 {
    flex-basis: auto !important;
    width: 60% !important; }

  .u-lg-size5of8 {
    flex-basis: auto !important;
    width: 62.5% !important; }

  .u-lg-size2of3,
  .u-lg-size4of6,
  .u-lg-size8of12 {
    flex-basis: auto !important;
    width: calc(100% * 2 / 3) !important; }

  .u-lg-size7of10 {
    flex-basis: auto !important;
    width: 70% !important; }

  .u-lg-size3of4,
  .u-lg-size6of8,
  .u-lg-size9of12 {
    flex-basis: auto !important;
    width: 75% !important; }

  .u-lg-size4of5,
  .u-lg-size8of10 {
    flex-basis: auto !important;
    width: 80% !important; }

  .u-lg-size5of6,
  .u-lg-size10of12 {
    flex-basis: auto !important;
    width: calc(100% * 5 / 6) !important; }

  .u-lg-size7of8 {
    flex-basis: auto !important;
    width: 87.5% !important; }

  .u-lg-size9of10 {
    flex-basis: auto !important;
    width: 90% !important; }

  .u-lg-size11of12 {
    flex-basis: auto !important;
    width: calc(100% * 11 / 12) !important; }

  /* Intrinsic widths
     ======================================================================== */
  /**
   * Make an element shrink wrap its content.
   */
  .u-lg-sizeFit {
    flex-basis: auto !important; }

  /**
   * Make an element fill the remaining space.
   *
   * 1. Be explicit to work around IE10 bug with shorthand flex
   *    http://git.io/vllC7
   * 2. IE10 ignores previous `flex-basis` value. Setting again here fixes
   *    http://git.io/vllMt
   */
  .u-lg-sizeFill {
    flex: 1 1 0% !important;
    /* 1 */
    flex-basis: 0% !important;
    /* 2 */ }

  /**
   * An alternative method to make an element fill the remaining space.
   * Distributes space based on the initial width and height of the element
   *
   * http://www.w3.org/TR/css-flexbox/images/rel-vs-abs-flex.svg
   */
  .u-lg-sizeFillAlt {
    flex: 1 1 auto !important;
    flex-basis: auto !important; }

  /**
   * Make an element the width of its parent.
   */
  .u-lg-sizeFull {
    box-sizing: border-box !important;
    display: block !important;
    width: 100% !important; } }
.u-soft {
  padding: 1rem !important; }

.u-softTop {
  padding-top: 1rem !important; }

.u-softRight {
  padding-right: 1rem !important; }

.u-softBottom {
  padding-bottom: 1rem !important; }

.u-softLeft {
  padding-left: 1rem !important; }

.u-softEnds {
  padding-top: 1rem !important;
  padding-bottom: 1rem !important; }

.u-softSides {
  padding-right: 1rem !important;
  padding-left: 1rem !important; }

.u-softHalf {
  padding: .5rem !important; }

.u-softHalfTop {
  padding-top: .5rem !important; }

.u-softHalfRight {
  padding-right: .5rem !important; }

.u-softHalfBottom {
  padding-bottom: .5rem !important; }

.u-softHalfLeft {
  padding-left: .5rem !important; }

.u-softHalfEnds {
  padding-top: .5rem !important;
  padding-bottom: .5rem !important; }

.u-softHalfSides {
  padding-right: .5rem !important;
  padding-left: .5rem !important; }

.u-softQuarter {
  padding: .25rem !important; }

.u-softQuarterTop {
  padding-top: .25rem !important; }

.u-softQuarterRight {
  padding-right: .25rem !important; }

.u-softQuarterBottom {
  padding-bottom: .25rem !important; }

.u-softQuarterLeft {
  padding-left: .25rem !important; }

.u-softQuarterEnds {
  padding-top: .25rem !important;
  padding-bottom: .25rem !important; }

.u-softQuarterSides {
  padding-right: .25rem !important;
  padding-left: .25rem !important; }

.u-softDouble {
  padding: 2rem !important; }

.u-softDoubleTop {
  padding-top: 2rem !important; }

.u-softDoubleRight {
  padding-right: 2rem !important; }

.u-softDoubleBottom {
  padding-bottom: 2rem !important; }

.u-softDoubleLeft {
  padding-left: 2rem !important; }

.u-softDoubleEnds {
  padding-top: 2rem !important;
  padding-bottom: 2rem !important; }

.u-softDoubleSides {
  padding-right: 2rem !important;
  padding-left: 2rem !important; }

.u-softTriple {
  padding: 3rem !important; }

.u-softTripleTop {
  padding-top: 3rem !important; }

.u-softTripleRight {
  padding-right: 3rem !important; }

.u-softTripleBottom {
  padding-bottom: 3rem !important; }

.u-softTripleLeft {
  padding-left: 3rem !important; }

.u-softTripleEnds {
  padding-top: 3rem !important;
  padding-bottom: 3rem !important; }

.u-softTripleSides {
  padding-right: 3rem !important;
  padding-left: 3rem !important; }

.u-hard {
  padding: 0 !important; }

.u-hardTop {
  padding-top: 0 !important; }

.u-hardRight {
  padding-right: 0 !important; }

.u-hardBottom {
  padding-bottom: 0 !important; }

.u-hardLeft {
  padding-left: 0 !important; }

.u-hardEnds {
  padding-top: 0 !important;
  padding-bottom: 0 !important; }

.u-hardSides {
  padding-right: 0 !important;
  padding-left: 0 !important; }

.u-push {
  margin: 1rem !important; }

.u-pushTop {
  margin-top: 1rem !important; }

.u-pushRight {
  margin-right: 1rem !important; }

.u-pushBottom {
  margin-bottom: 1rem !important; }

.u-pushLeft {
  margin-left: 1rem !important; }

.u-pushEnds {
  margin-top: 1rem !important;
  margin-bottom: 1rem !important; }

.u-pushSides {
  margin-right: 1rem !important;
  margin-left: 1rem !important; }

.u-pushHalf {
  margin: .5rem !important; }

.u-pushHalfTop {
  margin-top: .5rem !important; }

.u-pushHalfRight {
  margin-right: .5rem !important; }

.u-pushHalfBottom {
  margin-bottom: .5rem !important; }

.u-pushHalfLeft {
  margin-left: .5rem !important; }

.u-pushHalfEnds {
  margin-top: .5rem !important;
  margin-bottom: .5rem !important; }

.u-pushHalfSides {
  margin-right: .5rem !important;
  margin-left: .5rem !important; }

.u-pushDouble {
  margin: 2rem !important; }

.u-pushDoubleTop {
  margin-top: 2rem !important; }

.u-pushDoubleRight {
  margin-right: 2rem !important; }

.u-pushDoubleBottom {
  margin-bottom: 2rem !important; }

.u-pushDoubleLeft {
  margin-left: 2rem !important; }

.u-pushDoubleEnds {
  margin-top: 2rem !important;
  margin-bottom: 2rem !important; }

.u-pushDoubleSides {
  margin-right: 2rem !important;
  margin-left: 2rem !important; }

.u-pushTriple {
  margin: 3rem !important; }

.u-pushTripleTop {
  margin-top: 3rem !important; }

.u-pushTripleRight {
  margin-right: 3rem !important; }

.u-pushTripleBottom {
  margin-bottom: 3rem !important; }

.u-pushTripleLeft {
  margin-left: 3rem !important; }

.u-pushTripleEnds {
  margin-top: 3rem !important;
  margin-bottom: 3rem !important; }

.u-pushTripleSides {
  margin-right: 3rem !important;
  margin-left: 3rem !important; }

.u-flush {
  margin: 0 !important; }

.u-flushTop {
  margin-top: 0 !important; }

.u-flushRight {
  margin-right: 0 !important; }

.u-flushBottom {
  margin-bottom: 0 !important; }

.u-flushLeft {
  margin-left: 0 !important; }

.u-flushEnds {
  margin-top: 0 !important;
  margin-bottom: 0 !important; }

.u-flushSides {
  margin-right: 0 !important;
  margin-left: 0 !important; }

/**
 * Word breaking
 *
 * Break strings when their length exceeds the width of their container.
 */
.u-textBreak {
  word-wrap: break-word !important; }

/**
 * Horizontal text alignment
 */
.u-textCenter {
  text-align: center !important; }

.u-textLeft {
  text-align: left !important; }

.u-textRight {
  text-align: right !important; }

/**
 * Inherit the ancestor's text color.
 */
.u-textInheritColor {
  color: inherit !important; }

/**
 * Enables font kerning in all browsers.
 * http://blog.typekit.com/2014/02/05/kerning-on-the-web/
 *
 * 1. Chrome (not Windows), Firefox, IE 10+
 * 2. Safari 7 and future browsers
 * 3. Chrome (not Windows), Firefox, Safari 6+, iOS, Android
 */
.u-textKern {
  font-feature-settings: "kern" 1;
  /* 1 */
  font-kerning: normal;
  /* 2 */
  text-rendering: optimizeLegibility;
  /* 3 */ }

/**
 * Prevent whitespace wrapping
 */
.u-textNoWrap {
  white-space: nowrap !important; }

/**
 * Text truncation
 *
 * Prevent text from wrapping onto multiple lines, and truncate with an
 * ellipsis.
 *
 * 1. Ensure that the node has a maximum width after which truncation can
 *    occur.
 * 2. Fix for IE 8/9 if `word-wrap: break-word` is in effect on ancestor
 *    nodes.
 */
.u-textTruncate {
  max-width: 100%;
  /* 1 */
  overflow: hidden !important;
  text-overflow: ellipsis !important;
  white-space: nowrap !important;
  word-wrap: normal !important;
  /* 2 */ }

/** @define utilities */
/* Applies to flex container
   ========================================================================== */
/**
 * Container
 */
.u-flex {
  display: flex !important; }

.u-flexInline {
  display: inline-flex !important; }

/**
 * Direction: row
 */
.u-flexRow {
  flex-direction: row !important; }

.u-flexRowReverse {
  flex-direction: row-reverse !important; }

/**
 * Direction: column
 */
.u-flexCol {
  flex-direction: column !important; }

.u-flexColReverse {
  flex-direction: column-reverse !important; }

/**
 * Wrap
 */
.u-flexWrap {
  flex-wrap: wrap !important; }

.u-flexNoWrap {
  flex-wrap: nowrap !important; }

.u-flexWrapReverse {
  flex-wrap: wrap-reverse !important; }

/**
 * Align items along the main axis of the current line of the flex container
 */
.u-flexJustifyStart {
  justify-content: flex-start !important; }

.u-flexJustifyEnd {
  justify-content: flex-end !important; }

.u-flexJustifyCenter {
  justify-content: center !important; }

.u-flexJustifyBetween {
  justify-content: space-between !important; }

.u-flexJustifyAround {
  justify-content: space-around !important; }

/**
 * Align items in the cross axis of the current line of the flex container
 * Similar to `justify-content` but in the perpendicular direction
 */
.u-flexAlignItemsStart {
  align-items: flex-start !important; }

.u-flexAlignItemsEnd {
  align-items: flex-end !important; }

.u-flexAlignItemsCenter {
  align-items: center !important; }

.u-flexAlignItemsStretch {
  align-items: stretch !important; }

.u-flexAlignItemsBaseline {
  align-items: baseline !important; }

/**
 * Aligns items within the flex container when there is extra
 * space in the cross-axis
 *
 * Has no effect when there is only one line of flex items.
 */
.u-flexAlignContentStart {
  align-content: flex-start !important; }

.u-flexAlignContentEnd {
  align-content: flex-end !important; }

.u-flexAlignContentCenter {
  align-content: center !important; }

.u-flexAlignContentStretch {
  align-content: stretch !important; }

.u-flexAlignContentBetween {
  align-content: space-between !important; }

.u-flexAlignContentAround {
  align-content: space-around !important; }

/**
 * 1. Set the flex-shrink default explicitly to fix IE10 - http://git.io/vllC7
 */
/* postcss-bem-linter: ignore */
.u-flex > *,
.u-flexInline > * {
  flex-shrink: 1;
  /* 1 */ }

/* Applies to flex items
   ========================================================================== */
/**
 * Override default alignment of single item when specified by `align-items`
 */
.u-flexAlignSelfStart {
  align-self: flex-start !important; }

.u-flexAlignSelfEnd {
  align-self: flex-end !important; }

.u-flexAlignSelfCenter {
  align-self: center !important; }

.u-flexAlignSelfStretch {
  align-self: stretch !important; }

.u-flexAlignSelfBaseline {
  align-self: baseline !important; }

.u-flexAlignSelfAuto {
  align-self: auto !important; }

/**
 * Change order without editing underlying HTML
 */
.u-flexOrderFirst {
  order: -1 !important; }

.u-flexOrderLast {
  order: 1 !important; }

.u-flexOrderNone {
  order: 0 !important; }

/**
 * Specify the flex grow factor, which determines how much the flex item will
 * grow relative to the rest of the flex items in the flex container.
 *
 * Supports 1-5 proportions
 *
 * 1. Provide all values to avoid IE10 bug with shorthand flex
 *    - http://git.io/vllC7
 *
 *    Use `0%` to avoid bug in IE10/11 with unitless flex basis. Using this
 *    instead of `auto` as this matches what the default would be with `flex`
 *    shorthand - http://git.io/vllWx
 */
.u-flexGrow1 {
  flex: 1 1 0% !important;
  /* 1 */ }

.u-flexGrow2 {
  flex: 2 1 0% !important; }

.u-flexGrow3 {
  flex: 3 1 0% !important; }

.u-flexGrow4 {
  flex: 4 1 0% !important; }

.u-flexGrow5 {
  flex: 5 1 0% !important; }

/**
 * Aligning with `auto` margins
 * http://www.w3.org/TR/css-flexbox-1/#auto-margins
 */
.u-flexExpand {
  margin: auto !important; }

.u-flexExpandLeft {
  margin-left: auto !important; }

.u-flexExpandRight {
  margin-right: auto !important; }

.u-flexExpandTop {
  margin-top: auto !important; }

.u-flexExpandBottom {
  margin-bottom: auto !important; }

/**
 * @define utilities
 * Size: breakpoint 1 (small)
 */
@media (min-width: 480px) {
  /* Applies to flex container
     ======================================================================== */
  /**
   * Container
   */
  .u-sm-flex {
    display: flex !important; }

  .u-sm-flexInline {
    display: inline-flex !important; }

  /**
   * Direction: row
   */
  .u-sm-flexRow {
    flex-direction: row !important; }

  .u-sm-flexRowReverse {
    flex-direction: row-reverse !important; }

  /**
   * Direction: column
   */
  .u-sm-flexCol {
    flex-direction: column !important; }

  .u-sm-flexColReverse {
    flex-direction: column-reverse !important; }

  /**
   * Wrap
   */
  .u-sm-flexWrap {
    flex-wrap: wrap !important; }

  .u-sm-flexNoWrap {
    flex-wrap: nowrap !important; }

  .u-sm-flexWrapReverse {
    flex-wrap: wrap-reverse !important; }

  /**
   * Align items along the main axis of the current line of the flex container
   */
  .u-sm-flexJustifyStart {
    justify-content: flex-start !important; }

  .u-sm-flexJustifyEnd {
    justify-content: flex-end !important; }

  .u-sm-flexJustifyCenter {
    justify-content: center !important; }

  .u-sm-flexJustifyBetween {
    justify-content: space-between !important; }

  .u-sm-flexJustifyAround {
    justify-content: space-around !important; }

  /**
   * Align items in the cross axis of the current line of the flex container
   * Similar to `justify-content` but in the perpendicular direction
   */
  .u-sm-flexAlignItemsStart {
    align-items: flex-start !important; }

  .u-sm-flexAlignItemsEnd {
    align-items: flex-end !important; }

  .u-sm-flexAlignItemsCenter {
    align-items: center !important; }

  .u-sm-flexAlignItemsStretch {
    align-items: stretch !important; }

  .u-sm-flexAlignItemsBaseline {
    align-items: baseline !important; }

  /**
   * Aligns items within the flex container when there is extra
   * space in the cross-axis
   *
   * Has no effect when there is only one line of flex items.
   */
  .u-sm-flexAlignContentStart {
    align-content: flex-start !important; }

  .u-sm-flexAlignContentEnd {
    align-content: flex-end !important; }

  .u-sm-flexAlignContentCenter {
    align-content: center !important; }

  .u-sm-flexAlignContentStretch {
    align-content: stretch !important; }

  .u-sm-flexAlignContentBetween {
    align-content: space-between !important; }

  .u-sm-flexAlignContentAround {
    align-content: space-around !important; }

  /**
   * 1. Set the flex-shrink default explicitly to fix IE10 - http://git.io/vllC7
   */
  /* postcss-bem-linter: ignore */
  .u-sm-flex > *,
  .u-sm-flexInline > * {
    flex-shrink: 1;
    /* 1 */ }

  /* Applies to flex items
     ======================================================================== */
  /**
   * Override default alignment of single item when specified by `align-items`
   */
  .u-sm-flexAlignSelfStart {
    align-self: flex-start !important; }

  .u-sm-flexAlignSelfEnd {
    align-self: flex-end !important; }

  .u-sm-flexAlignSelfCenter {
    align-self: center !important; }

  .u-sm-flexAlignSelfStretch {
    align-self: stretch !important; }

  .u-sm-flexAlignSelfBaseline {
    align-self: baseline !important; }

  .u-sm-flexAlignSelfAuto {
    align-self: auto !important; }

  /**
   * Change order without editing underlying HTML
   */
  .u-sm-flexOrderFirst {
    order: -1 !important; }

  .u-sm-flexOrderLast {
    order: 1 !important; }

  .u-sm-flexOrderNone {
    order: 0 !important; }

  /**
   * Specify the flex grow factor, which determines how much the flex item will
   * grow relative to the rest of the flex items in the flex container.
   *
   * Supports 1-5 proportions
   *
   * 1. Provide all values to avoid IE10 bug with shorthand flex
   *    http://git.io/vllC7
   *
   *    Use `0%` to avoid bug in IE10/11 with unitless flex basis
   *    http://git.io/vllWx
   */
  .u-sm-flexGrow1 {
    flex: 1 1 0% !important;
    /* 1 */ }

  .u-sm-flexGrow2 {
    flex: 2 1 0% !important; }

  .u-sm-flexGrow3 {
    flex: 3 1 0% !important; }

  .u-sm-flexGrow4 {
    flex: 4 1 0% !important; }

  .u-sm-flexGrow5 {
    flex: 5 1 0% !important; }

  /**
   * Aligning with `auto` margins
   * http://www.w3.org/TR/css-flexbox-1/#auto-margins
   */
  .u-sm-flexExpand {
    margin: auto !important; }

  .u-sm-flexExpandLeft {
    margin-left: auto !important; }

  .u-sm-flexExpandRight {
    margin-right: auto !important; }

  .u-sm-flexExpandTop {
    margin-top: auto !important; }

  .u-sm-flexExpandBottom {
    margin-bottom: auto !important; } }
/**
 * @define utilities
 * Size: breakpoint 1 (medium)
 */
@media (min-width: 720px) {
  /* Applies to flex container
     ======================================================================== */
  /**
   * Container
   */
  .u-md-flex {
    display: flex !important; }

  .u-md-flexInline {
    display: inline-flex !important; }

  /**
   * Direction: row
   */
  .u-md-flexRow {
    flex-direction: row !important; }

  .u-md-flexRowReverse {
    flex-direction: row-reverse !important; }

  /**
   * Direction: column
   */
  .u-md-flexCol {
    flex-direction: column !important; }

  .u-md-flexColReverse {
    flex-direction: column-reverse !important; }

  /**
   * Wrap
   */
  .u-md-flexWrap {
    flex-wrap: wrap !important; }

  .u-md-flexNoWrap {
    flex-wrap: nowrap !important; }

  .u-md-flexWrapReverse {
    flex-wrap: wrap-reverse !important; }

  /**
   * Align items along the main axis of the current line of the flex container
   */
  .u-md-flexJustifyStart {
    justify-content: flex-start !important; }

  .u-md-flexJustifyEnd {
    justify-content: flex-end !important; }

  .u-md-flexJustifyCenter {
    justify-content: center !important; }

  .u-md-flexJustifyBetween {
    justify-content: space-between !important; }

  .u-md-flexJustifyAround {
    justify-content: space-around !important; }

  /**
   * Align items in the cross axis of the current line of the flex container
   * Similar to `justify-content` but in the perpendicular direction
   */
  .u-md-flexAlignItemsStart {
    align-items: flex-start !important; }

  .u-md-flexAlignItemsEnd {
    align-items: flex-end !important; }

  .u-md-flexAlignItemsCenter {
    align-items: center !important; }

  .u-md-flexAlignItemsStretch {
    align-items: stretch !important; }

  .u-md-flexAlignItemsBaseline {
    align-items: baseline !important; }

  /**
   * Aligns items within the flex container when there is extra
   * space in the cross-axis
   *
   * Has no effect when there is only one line of flex items.
   */
  .u-md-flexAlignContentStart {
    align-content: flex-start !important; }

  .u-md-flexAlignContentEnd {
    align-content: flex-end !important; }

  .u-md-flexAlignContentCenter {
    align-content: center !important; }

  .u-md-flexAlignContentStretch {
    align-content: stretch !important; }

  .u-md-flexAlignContentBetween {
    align-content: space-between !important; }

  .u-md-flexAlignContentAround {
    align-content: space-around !important; }

  /**
   * 1. Set the flex-shrink default explicitly to fix IE10 - http://git.io/vllC7
   */
  /* postcss-bem-linter: ignore */
  .u-md-flex > *,
  .u-md-flexInline > * {
    flex-shrink: 1;
    /* 1 */ }

  /* Applies to flex items
     ======================================================================== */
  /**
   * Override default alignment of single item when specified by `align-items`
   */
  .u-md-flexAlignSelfStart {
    align-self: flex-start !important; }

  .u-md-flexAlignSelfEnd {
    align-self: flex-end !important; }

  .u-md-flexAlignSelfCenter {
    align-self: center !important; }

  .u-md-flexAlignSelfStretch {
    align-self: stretch !important; }

  .u-md-flexAlignSelfBaseline {
    align-self: baseline !important; }

  .u-md-flexAlignSelfAuto {
    align-self: auto !important; }

  /**
   * Change order without editing underlying HTML
   */
  .u-md-flexOrderFirst {
    order: -1 !important; }

  .u-md-flexOrderLast {
    order: 1 !important; }

  .u-md-flexOrderNone {
    order: 0 !important; }

  /**
   * Specify the flex grow factor, which determines how much the flex item will
   * grow relative to the rest of the flex items in the flex container.
   *
   * Supports 1-5 proportions
   *
   * 1. Provide all values to avoid IE10 bug with shorthand flex
   *    http://git.io/vllC7
   *
   *    Use `0%` to avoid bug in IE10/11 with unitless flex basis
   *    http://git.io/vllWx
   */
  .u-md-flexGrow1 {
    flex: 1 1 0% !important;
    /* 1 */ }

  .u-md-flexGrow2 {
    flex: 2 1 0% !important; }

  .u-md-flexGrow3 {
    flex: 3 1 0% !important; }

  .u-md-flexGrow4 {
    flex: 4 1 0% !important; }

  .u-md-flexGrow5 {
    flex: 5 1 0% !important; }

  /**
   * Aligning with `auto` margins
   * http://www.w3.org/TR/css-flexbox-1/#auto-margins
   */
  .u-md-flexExpand {
    margin: auto !important; }

  .u-md-flexExpandLeft {
    margin-left: auto !important; }

  .u-md-flexExpandRight {
    margin-right: auto !important; }

  .u-md-flexExpandTop {
    margin-top: auto !important; }

  .u-md-flexExpandBottom {
    margin-bottom: auto !important; } }
/**
 * @define utilities
 * Size: breakpoint 1 (large)
 */
@media (min-width: 1200px) {
  /* Applies to flex container
     ======================================================================== */
  /**
   * Container
   */
  .u-lg-flex {
    display: flex !important; }

  .u-lg-flexInline {
    display: inline-flex !important; }

  /**
   * Direction: row
   */
  .u-lg-flexRow {
    flex-direction: row !important; }

  .u-lg-flexRowReverse {
    flex-direction: row-reverse !important; }

  /**
   * Direction: column
   */
  .u-lg-flexCol {
    flex-direction: column !important; }

  .u-lg-flexColReverse {
    flex-direction: column-reverse !important; }

  /**
   * Wrap
   */
  .u-lg-flexWrap {
    flex-wrap: wrap !important; }

  .u-lg-flexNoWrap {
    flex-wrap: nowrap !important; }

  .u-lg-flexWrapReverse {
    flex-wrap: wrap-reverse !important; }

  /**
   * Align items along the main axis of the current line of the flex container
   */
  .u-lg-flexJustifyStart {
    justify-content: flex-start !important; }

  .u-lg-flexJustifyEnd {
    justify-content: flex-end !important; }

  .u-lg-flexJustifyCenter {
    justify-content: center !important; }

  .u-lg-flexJustifyBetween {
    justify-content: space-between !important; }

  .u-lg-flexJustifyAround {
    justify-content: space-around !important; }

  /**
   * Align items in the cross axis of the current line of the flex container
   * Similar to `justify-content` but in the perpendicular direction
   */
  .u-lg-flexAlignItemsStart {
    align-items: flex-start !important; }

  .u-lg-flexAlignItemsEnd {
    align-items: flex-end !important; }

  .u-lg-flexAlignItemsCenter {
    align-items: center !important; }

  .u-lg-flexAlignItemsStretch {
    align-items: stretch !important; }

  .u-lg-flexAlignItemsBaseline {
    align-items: baseline !important; }

  /**
   * Aligns items within the flex container when there is extra
   * space in the cross-axis
   *
   * Has no effect when there is only one line of flex items.
   */
  .u-lg-flexAlignContentStart {
    align-content: flex-start !important; }

  .u-lg-flexAlignContentEnd {
    align-content: flex-end !important; }

  .u-lg-flexAlignContentCenter {
    align-content: center !important; }

  .u-lg-flexAlignContentStretch {
    align-content: stretch !important; }

  .u-lg-flexAlignContentBetween {
    align-content: space-between !important; }

  .u-lg-flexAlignContentAround {
    align-content: space-around !important; }

  /**
   * 1. Set the flex-shrink default explicitly to fix IE10 - http://git.io/vllC7
   */
  /* postcss-bem-linter: ignore */
  .u-lg-flex > *,
  .u-lg-flexInline > * {
    flex-shrink: 1;
    /* 1 */ }

  /* Applies to flex items
     ======================================================================== */
  /**
   * Override default alignment of single item when specified by `align-items`
   */
  .u-lg-flexAlignSelfStart {
    align-self: flex-start !important; }

  .u-lg-flexAlignSelfEnd {
    align-self: flex-end !important; }

  .u-lg-flexAlignSelfCenter {
    align-self: center !important; }

  .u-lg-flexAlignSelfStretch {
    align-self: stretch !important; }

  .u-lg-flexAlignSelfBaseline {
    align-self: baseline !important; }

  .u-lg-flexAlignSelfAuto {
    align-self: auto !important; }

  /**
   * Change order without editing underlying HTML
   */
  .u-lg-flexOrderFirst {
    order: -1 !important; }

  .u-lg-flexOrderLast {
    order: 1 !important; }

  .u-lg-flexOrderNone {
    order: 0 !important; }

  /**
   * Specify the flex grow factor, which determines how much the flex item will
   * grow relative to the rest of the flex items in the flex container.
   *
   * Supports 1-5 proportions
   *
   * 1. Provide all values to avoid IE10 bug with shorthand flex
   *    http://git.io/vllC7
   *
   *    Use `0%` to avoid bug in IE10/11 with unitless flex basis
   *    http://git.io/vllWx
   */
  .u-lg-flexGrow1 {
    flex: 1 1 0% !important;
    /* 1 */ }

  .u-lg-flexGrow2 {
    flex: 2 1 0% !important; }

  .u-lg-flexGrow3 {
    flex: 3 1 0% !important; }

  .u-lg-flexGrow4 {
    flex: 4 1 0% !important; }

  .u-lg-flexGrow5 {
    flex: 5 1 0% !important; }

  /**
   * Aligning with `auto` margins
   * http://www.w3.org/TR/css-flexbox-1/#auto-margins
   */
  .u-lg-flexExpand {
    margin: auto !important; }

  .u-lg-flexExpandLeft {
    margin-left: auto !important; }

  .u-lg-flexExpandRight {
    margin-right: auto !important; }

  .u-lg-flexExpandTop {
    margin-top: auto !important; }

  .u-lg-flexExpandBottom {
    margin-bottom: auto !important; } }
/**
 * This component lets you lay out a row of cells in various ways. You can
 * specify whether a cell should be wide enough to fit its content, or take up
 * the remaining space in the row. It's also possible to give all cells an
 * equal width, and to control their vertical alignment.
 */
/**
 * 1. Protect against the component expanding beyond the confines of its
 *    container if properties affecting the box-model are applied to the
 *    component. Mainly necessary because of (5).
 * 2. Rely on table layout.
 * 3. Zero out the default spacing that might be on an element (e.g., `ul`).
 * 4. Make sure the component fills at least the full width of its parent.
 * 5. Reset the table-layout algorithm in case a component is nested.
 */
.Arrange {
  box-sizing: border-box;
  /* 1 */
  display: table;
  /* 2 */
  margin: 0;
  /* 3 */
  min-width: 100%;
  /* 4 */
  padding: 0;
  /* 3 */
  table-layout: auto;
  /* 5 */ }

/**
 * There are three possible types of child. `sizeFill` will expand to fill all
 * of the remaining space not filled by `sizeFit` elements. `row` will begin a
 * new row context, keeping columns the same size.
 *
 * 1. Zero out any default spacing that might be on an element (e.g., `li`);
 *    Margin has no effect when coupled with `display: table-cell`.
 * 2. All cells are top-aligned by default
 */
.Arrange-sizeFill,
.Arrange-sizeFit {
  display: table-cell;
  padding: 0;
  /* 1 */
  vertical-align: top;
  /* 2 */ }

/**
 * Make sure the main content block expands to fill the remaining space.
 */
.Arrange-sizeFill {
  width: 100%; }

/**
 * Where possible, protect against large images breaking the layout. Prevent them from
 * exceeding the width of the main content block by making them fluid.
 *
 * Only work for all browsers with the `Arrange--equally` variant. For Firefox
 * and IE to constrain image dimensions for other layouts, large images will
 * need their width set to `100%`.
 */
.Arrange-sizeFill img {
  height: auto;
  max-width: 100%; }

/**
 * Defend against a side-effect of this layout pattern: images in
 * 'Arrange-sizeFit' cannot be fluid, otherwise they lose their ability to
 * provide size to a cell.
 */
.Arrange-sizeFit img {
  max-width: none !important;
  width: auto !important; }

/**
 * Start a new row context.
 */
.Arrange-row {
  display: table-row; }

/* Vertical alignment modifiers
   ========================================================================== */
.Arrange--middle > .Arrange-sizeFill,
.Arrange--middle > .Arrange-sizeFit {
  vertical-align: middle; }

.Arrange--bottom > .Arrange-sizeFill,
.Arrange--bottom > .Arrange-sizeFit {
  vertical-align: bottom; }

/* Equal-width modifier
   ========================================================================== */
/**
 * This layout algorithm will create equal-width table cells, irrespective of
 * the width of their content.
 *
 * 1. The layout algorithm requires a set width to correctly calculate table
 *    cell width.
 */
.Arrange--equal {
  table-layout: fixed;
  width: 100%;
  /* 1 */ }

/**
 * Give the cells an equal width. This value ensures that Arrange is still 100%
 * wide when gutters are used in conjunctions with equal-width cells.
 *
 * It's recommended that only 'Arrange-sizeFill' be used for equal width cells.
 * Their inner images will automatically be responsive.
 */
.Arrange--equal > .Arrange-sizeFill,
.Arrange--equal > .Arrange-sizeFit,
.Arrange--equal > .Arrange-row > .Arrange-sizeFill,
.Arrange--equal > .Arrange-row > .Arrange-sizeFit {
  width: 1%; }

/* Gutter modifier
   ========================================================================== */
/**
 * Add a gutter between cells
 *
 * NOTE: this can trigger a horizontal scrollbar if the component is as wide as
 * the viewport. Use padding on a container, or `overflow-x:hidden` to protect
 * against it.
 */
.Arrange--withGutter {
  margin: 0 -0.5rem; }

.Arrange--withGutter > .Arrange-sizeFit,
.Arrange--withGutter > .Arrange-sizeFill,
.Arrange--withGutter > .Arrange-row > .Arrange-sizeFit,
.Arrange--withGutter > .Arrange-row > .Arrange-sizeFill {
  padding: 0 0.5rem; }

/** @define Button */
:root {
  --Button-border-color: currentcolor;
  --Button-border-width: 1px;
  --Button-color: inherit;
  --Button-disabled-opacity: 0.6;
  --Button-font: inherit;
  --Button-padding: 0.4em 0.75em; }

/**
 * The button classes are best applied to links and buttons.
 * These components can be used in forms, as calls to action, or as part of the
 * general UI of the site/app.
 */
/**
 * 1. Normalize `box-sizing` across all elements that this component could be
 *    applied to.
 * 2. Inherit text color from ancestor.
 * 3. Inherit font styles from ancestor.
 * 4. Prevent button text from being selectable.
 */
.Button {
  background: transparent;
  border-color: var(--Button-border-color);
  border-style: solid;
  border-width: var(--Button-border-width);
  box-sizing: border-box;
  /* 1 */
  color: var(--Button-color);
  /* 2 */
  cursor: pointer;
  display: inline-block;
  font: var(--Button-font);
  /* 3 */
  margin: 0;
  padding: var(--Button-padding);
  position: relative;
  text-align: center;
  text-decoration: none;
  user-select: none;
  /* 4 */ }

/**
 * Remove excess padding and border in Firefox 4+
 */
.Button::-moz-focus-inner {
  border: 0;
  padding: 0; }

/**
 * Work around a Firefox/IE bug where the transparent `button` background
 * results in a loss of the default `button` focus styles.
 */
.Button:focus {
  outline: 1px dotted;
  outline: 5px auto -webkit-focus-ring-color; }

/**
 * UI states
 */
.Button:hover,
.Button:focus,
.Button:active {
  text-decoration: none; }

.Button:disabled,
.Button.is-disabled {
  cursor: default;
  opacity: var(--Button-disabled-opacity); }

/** @define FlexEmbed */
/**
 * Flexible media embeds
 *
 * For use with media embeds – such as videos, slideshows, or even images –
 * that need to retain a specific aspect ratio but adapt to the width of their
 * containing element.
 *
 * Based on: http://alistapart.com/article/creating-intrinsic-ratios-for-video
 */
.FlexEmbed {
  display: block;
  overflow: hidden;
  position: relative; }

/**
 * The aspect-ratio hack is applied to an empty element because it allows
 * the component to respect `max-height`. Default aspect ratio is 1:1.
 */
.FlexEmbed-ratio {
  display: block;
  padding-bottom: 100%;
  width: 100%; }

/**
 * Modifier: 3:1 aspect ratio
 */
.FlexEmbed-ratio--3by1 {
  padding-bottom: calc(100% / 3); }

/**
 * Modifier: 2:1 aspect ratio
 */
.FlexEmbed-ratio--2by1 {
  padding-bottom: 50%; }

/**
 * Modifier: 16:9 aspect ratio
 */
.FlexEmbed-ratio--16by9 {
  padding-bottom: 56.25%; }

/**
 * Modifier: 4:3 aspect ratio
 */
.FlexEmbed-ratio--4by3 {
  padding-bottom: 75%; }

/**
 * Fit the content to the aspect ratio
 */
.FlexEmbed-content {
  bottom: 0;
  height: 100%;
  left: 0;
  position: absolute;
  top: 0;
  width: 100%; }

/* Grid container
   ========================================================================== */
/**
 * All content must be contained within child `Grid-cell` elements.
 *
 * 1. Account for browser defaults of elements that might be the root node of
 *    the component.
 */
.Grid {
  box-sizing: border-box;
  display: flex;
  /* 1 */
  flex-flow: row wrap;
  margin: 0;
  /* 1 */
  padding: 0;
  /* 1 */ }

/**
 * Modifier: center align all grid cells
 */
.Grid--alignCenter {
  justify-content: center; }

/**
 * Modifier: right align all grid cells
 */
.Grid--alignRight {
  justify-content: flex-end; }

/**
 * Modifier: middle-align grid cells
 */
.Grid--alignMiddle {
  align-items: center; }

/**
 * Modifier: bottom-align grid cells
 */
.Grid--alignBottom {
  align-items: flex-end; }

/**
 * Modifier: allow cells to equal distribute width
 *
 * 1. Provide all values to avoid IE10 bug with shorthand flex
 *    http://git.io/vllC7
 *
 *    Use `0%` to avoid bug in IE10/11 with unitless flex basis
 *    http://git.io/vllWx
 */
.Grid--fit > .Grid-cell {
  flex: 1 1 0%;
  /* 1 */ }

/**
 * Modifier: all cells match height of tallest cell in a row
 */
.Grid--equalHeight > .Grid-cell {
  display: flex; }

/**
 * Modifier: gutters
 */
.Grid--withGutter {
  margin: 0 -1rem; }

.Grid--withGutter > .Grid-cell {
  padding: 0 1rem; }

/* Grid cell
   ========================================================================== */
/**
 * No explicit width by default. Rely on combining `Grid-cell` with a dimension
 * utility or a component class that extends 'Grid'.
 *
 * 1. Set flex items to full width by default
 * 2. Fix issue where elements with overflow extend past the
 *    `Grid-cell` container - https://git.io/vw5oF
 */
.Grid-cell {
  box-sizing: inherit;
  flex-basis: 100%;
  /* 1 */
  min-width: 0;
  /* 2 */ }

/**
 * Modifier: horizontally center one unit
 * Set a specific unit to be horizontally centered. Doesn't affect
 * any other units. Can still contain a child `Grid` object.
 */
.Grid-cell--center {
  margin: 0 auto; }
